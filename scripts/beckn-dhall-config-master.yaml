apiVersion: v1
data:
  allocation-service.dhall: |
    let globalCommon = ../generic/common.dhall

    let appCfg = ./static-offer-driver-app.dhall

    let SortMode = < ETA | IdleTime >

    let shards =
          [ globalCommon.mkShard
              +0
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/565db72a-04d4-4211-90ae-c956461397b2"
          , globalCommon.mkShard
              +1
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/a45f243f-9915-4842-b78b-6d718844a48d"
          , globalCommon.mkShard
              +2
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/fb6ee235-8cf5-4f8f-aba2-40de1fa733d1"
          , globalCommon.mkShard
              +3
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/c26001a5-8a20-4e77-bebd-f9d7fce618bc"
          , globalCommon.mkShard
              +4
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/384786e9-63e1-4f00-bbd9-40480387907d"
          , globalCommon.mkShard
              +5
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/dc46e80a-99d7-4f96-9949-2c045106b081"
          , globalCommon.mkShard
              +6
              "api.sandbox.beckn.juspay.in/dev/bpp/cab/v1/092ef105-6fe6-4eab-9c6f-e8a57b51e1af"
          ]

    let driverPoolBatchesCfg = { driverBatchSize = +5, maxNumberOfBatches = +3 }

    in  { appCfg
        , metricsPort = +9999
        , reallocationsLimit = +5
        , driverNotificationExpiry = +25
        , rideAllocationExpiry = +180
        , requestsNumPerIteration = +50
        , processDelay = +1000
        , shards
        , healthcheckPort = +8114
        , httpClientOptions = appCfg.httpClientOptions
        , shortDurationRetryCfg = appCfg.shortDurationRetryCfg
        , longDurationRetryCfg = appCfg.longDurationRetryCfg
        , esqDBCfg = appCfg.esqDBCfg
        , hedisCfg = appCfg.hedisCfg
        , hedisNonCriticalCfg = appCfg.hedisCfg
        , hedisNonCriticalClusterCfg = appCfg.hedisClusterCfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = appCfg.hedisClusterCfg
        , loggerConfig =
            appCfg.loggerConfig // { logFilePath = "/tmp/allocation-service.log" }
        , kafkaProducerCfg = appCfg.kafkaProducerCfg
        , nwAddress = appCfg.nwAddress
        , graceTerminationPeriod = appCfg.graceTerminationPeriod
        , encTools = appCfg.encTools
        , selfUIUrl = appCfg.selfUIUrl
        , cacheConfig = appCfg.cacheConfig
        , driverPoolCfg = appCfg.driverPoolCfg
        , driverPoolBatchesCfg
        }
  beckn-gateway.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/beckn-gateway.dhall

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    in  { hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisClusterdisCfg = rccfg
        , port = +8015
        , metricsPort = +9999
        , selfId = "api.sandbox.beckn.juspay.in/dev/gateway/v1"
        , hostName = "juspay.in"
        , authEntity =
          { signingKey = sec.signingKey
          , uniqueKeyId = "22"
          , signatureExpiry = common.signatureExpiry
          }
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/beckn-gateway.log" }
        , graceTerminationPeriod = +90
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , registryUrl = common.registryUrl
        , disableSignatureAuth = False
        }
  broadcast-message.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/dynamic-offer-driver-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_driver_offer_bpp_v2"
          , connectSchemaName = "atlas_driver_offer_bpp"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hedisCfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let hedisClusterCfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let consumerProperties =
          { groupId = "broadcast-messages-compute"
          , brockers = [ "kafka.kafka.svc.cluster.local:9092" ]
          , autoCommit = Some +1000
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let kafkaConsumerCfg =
          { topicNames = [ "broadcast-messages-master" ], consumerProperties }

    let availabilityTimeWindowOption =
          { period = +7, periodType = common.periodType.Days }

    let cacheConfig = { configsExpTime = +86400 }

    let tables =
          { enableKVForWriteAlso =
              [] : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead = [] : List Text
          }

    in  { hedisCfg
        , hedisNonCriticalCfg = hedisCfg
        , hedisNonCriticalClusterCfg = hedisClusterCfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg
        , esqDBCfg
        , esqDBReplicaCfg
        , cacheConfig
        , dumpEvery = +30
        , kafkaConsumerCfg
        , availabilityTimeWindowOption
        , timeBetweenUpdates = +60
        , granualityPeriodType = common.periodType.Hours
        , httpClientOptions = common.httpClientOptions
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/kafka-consumers-broadcast-messages.log"
                , logRawSql = False
                }
        , tables
        }
  common.dhall: |
    let sec = ./secrets/common.dhall

    let globalCommon = ../generic/common.dhall

    let branchName = "master"

    in  { smsSessionConfig = globalCommon.smsSessionConfig
        , autoMigrate = globalCommon.autoMigrate
        , loggerConfig = globalCommon.loggerConfig // { logRawSql = True }
        , LogLevel = globalCommon.LogLevel
        , ServerName = globalCommon.ServerName
        , s3Config = sec.s3Config
        , s3PublicConfig = sec.s3PublicConfig
        , slackToken = sec.slackToken
        , signatureExpiry = globalCommon.signatureExpiry
        , httpClientOptions = globalCommon.httpClientOptions
        , shortDurationRetryCfg = globalCommon.shortDurationRetryCfg
        , longDurationRetryCfg = globalCommon.longDurationRetryCfg
        , smsUserName = sec.smsUserName
        , smsPassword = sec.smsPassword
        , InfoBIPConfig = sec.InfoBIPConfig
        , branchName
        , periodType = globalCommon.periodType
        , passetto = { _1 = "passetto-hs.atlas", _2 = 8012 }
        , googleTranslateUrl = "https://www.googleapis.com/"
        , googleTranslateKey = sec.googleTranslateKey
        , registryUrl = "https://api.sandbox.beckn.juspay.in/dev/registry"
        , authServiceUrl = "http://beckn-app-backend-master.atlas:8013"
        , consumerType = globalCommon.consumerType
        , kafkaCompression = globalCommon.kafkaCompression
        , schedulerType = globalCommon.schedulerType
        }
  dobpp-dashboard-internal.dhall: |
    let common = ./common.dhall

    let globalCommon = ../generic/common.dhall

    let sec = ./secrets/dynamic-offer-driver-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_driver_offer_bpp_v2"
          , connectSchemaName = "atlas_driver_offer_bpp"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let smsConfig =
          { sessionConfig = common.smsSessionConfig
          , credConfig =
            { username = common.smsUserName
            , password = common.smsPassword
            , otpHash = sec.smsOtpHash
            }
          , useFakeSms = Some 7891
          , url = "https://http.myvfirst.com"
          , sender = "JUSPAY"
          }

    let apiRateLimitOptions = { limit = +100000, limitResetTimeInSec = +1 }

    let slackCfg =
          { channelName = "beckn-driver-onboard-test"
          , slackToken = common.slackToken
          }


    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let driverLocationUpdateRateLimitOptions =
          { limit = +2000000000, limitResetTimeInSec = +2 }

    let cacheConfig = { configsExpTime = +86400 }

    let cacheTranslationConfig = { expTranslationTime = +3600 }

    let kafkaProducerCfg =
          { brokers = [ "kafka.kafka.svc.cluster.local:9092" ]
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let clickhouseCfg =
          { username = "xxxx"
          , host = "xxxxx"
          , port = 1234
          , password = "xxxx"
          , database = "xxxx"
          , tls = True
          }

    let sampleKafkaConfig
        : globalCommon.kafkaConfig
        = { topicName = "dynamic-offer-driver-events-updates"
          , kafkaKey = "dynamic-offer-driver"
          }

    let sampleLogConfig
        : Text
        = "log-stream"

    let eventStreamMappings =
          [ { streamName = globalCommon.eventStreamNameType.KAFKA_STREAM
            , streamConfig = globalCommon.streamConfig.KafkaStream sampleKafkaConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.RideStarted
              , globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              , globalCommon.eventType.BookingCreated
              , globalCommon.eventType.BookingCancelled
              , globalCommon.eventType.BookingCompleted
              , globalCommon.eventType.SearchRequest
              , globalCommon.eventType.Quotes
              , globalCommon.eventType.Estimate
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.LOG_STREAM
            , streamConfig = globalCommon.streamConfig.LogStream sampleLogConfig
            , eventTypes =
              [ globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              ]
            }
          ]

    let tables =
          { enableKVForWriteAlso =
                [ { nameOfTable = "registration_token", percentEnable = 100 }
                , { nameOfTable = "search_request", percentEnable = 100 }
                , { nameOfTable = "search_try", percentEnable = 100 }
                , { nameOfTable = "driver_information", percentEnable = 100 }
                , { nameOfTable = "driver_flow_status", percentEnable = 100 }
                , { nameOfTable = "business_event", percentEnable = 100 }
                , { nameOfTable = "booking", percentEnable = 100 }
                , { nameOfTable = "estimate", percentEnable = 100 }
                , { nameOfTable = "fare_parameters", percentEnable = 100 }
                , { nameOfTable = "fare_parameters_progressive_details", percentEnable = 100 }
                , { nameOfTable = "booking_location", percentEnable = 100 }
                , { nameOfTable = "ride_details", percentEnable = 100 }
                , { nameOfTable = "rider_details", percentEnable = 100 }
                , { nameOfTable = "driver_stats", percentEnable = 100 }
                , { nameOfTable = "driver_quote"
                  , percentEnable = 100
                  }
                , { nameOfTable = "search_request_location", percentEnable = 100 }
                , { nameOfTable = "fare_parameters_slab_details", percentEnable = 100 }
                , { nameOfTable = "booking_cancellation_reason", percentEnable = 100 }
                , { nameOfTable = "rating", percentEnable = 100 }
                , { nameOfTable = "beckn_request", percentEnable = 100 }
                , { nameOfTable = "ride", percentEnable = 100 }
                , { nameOfTable = "search_request_for_driver", percentEnable = 100 }
                , { nameOfTable = "person", percentEnable = 100 }
                , { nameOfTable = "vehicle", percentEnable = 100 }
                , { nameOfTable = "driver_rc_association", percentEnable = 100 }
                , { nameOfTable = "driver_referral", percentEnable = 100 }
                , { nameOfTable = "message", percentEnable = 100 }
                , { nameOfTable = "idfy_verification", percentEnable = 100 }
                ]
              : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead =
                [ "registration_token"
                , "search_request"
                , "search_try"
                , "driver_information"
                , "driver_flow_status"
                , "business_event"
                , "booking"
                , "estimate"
                , "fare_parameters"
                , "fare_parameters_progressive_details"
                , "booking_location"
                , "ride_details"
                , "rider_details"
                , "driver_stats"
                , "driver_quote"
                , "search_request_location"
                , "fare_parameters_slab_details"
                , "booking_cancellation_reason"
                , "rating"
                , "beckn_request"
                , "search_request_for_driver"
                , "ride"
                , "person"
                , "vehicle"
                , "driver_rc_association"
                , "driver_referral"
                , "message"
                , "idfy_verification"
                ]
              : List Text
          }

    let appBackendBapInternal =
          { name = "APP_BACKEND"
          , url = "http://localhost:8013/"
          , apiKey = sec.appBackendApikey
          , internalKey = sec.internalKey
          }

    let AllocatorJobType =
          < SendSearchRequestToDriver
          | SendPaymentReminderToDriver
          | UnsubscribeDriverForPaymentOverdue
          | UnblockDriver
          >

    let jobInfoMapx =
          [ { mapKey = AllocatorJobType.SendSearchRequestToDriver
            , mapValue = False
            }
          , { mapKey = AllocatorJobType.SendPaymentReminderToDriver
            , mapValue = False
            }
          , { mapKey = AllocatorJobType.UnsubscribeDriverForPaymentOverdue
            , mapValue = True
            }
          , { mapKey = AllocatorJobType.UnblockDriver, mapValue = False }
          ]


    in  { esqDBCfg
        , esqDBReplicaCfg
        , esqLocationDBCfg = esqDBCfg
        , esqLocationDBRepCfg = esqDBReplicaCfg
        , clickhouseCfg
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = True
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , port = +8016
        , metricsPort = +9997
        , hostName = "juspay.in"
        , nwAddress = "https://api.sandbox.beckn.juspay.in/dev/dobpp/beckn"
        , selfUIUrl = "https://api.sandbox.beckn.juspay.in/dev/dobpp/ui"
        , signingKey = sec.signingKey
        , signatureExpiry = common.signatureExpiry
        , s3Config = common.s3Config
        , s3PublicConfig = common.s3PublicConfig
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , coreVersion = "0.9.4"
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/dynamic-offer-driver-app.log"
                , logRawSql = True
                }
        , googleTranslateUrl = common.googleTranslateUrl
        , googleTranslateKey = common.googleTranslateKey
        , appBackendBapInternal
        , graceTerminationPeriod = +90
        , encTools
        , authTokenCacheExpiry = +600
        , disableSignatureAuth = False
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , apiRateLimitOptions
        , slackCfg
        , smsCfg = smsConfig
        , searchRequestExpirationSeconds = +1800
        , driverQuoteExpirationSeconds = +15
        , driverUnlockDelay = +2
        , cacheConfig
        , metricsSearchDurationTimeout = +45
        , dashboardToken = sec.dashboardToken
        , driverLocationUpdateRateLimitOptions
        , driverReachedDistance = +100
        , cacheTranslationConfig
        , driverLocationUpdateTopic = "location-updates-master"
        , broadcastMessageTopic = "broadcast-messages-master"
        , kafkaProducerCfg
        , snapToRoadSnippetThreshold = +300
        , minTripDistanceForReferralCfg = Some +1000
        , maxShards = +5
        , enableAPILatencyLogging = False
        , enableAPIPrometheusMetricLogging = True
        , eventStreamMap = eventStreamMappings
        , locationTrackingServiceKey = sec.locationTrackingServiceKey
        , tables
        , schedulerSetName = "Scheduled_Jobs"
        , schedulerType = common.schedulerType.RedisBased
        , jobInfoMapx
        }
  driver-availability-calculator.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/dynamic-offer-driver-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_driver_offer_bpp_v2"
          , connectSchemaName = "atlas_driver_offer_bpp"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hedisCfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let hedisClusterCfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let consumerProperties =
          { groupId = "driver-availability-compute"
          , brockers = [ "kafka.kafka.svc.cluster.local:9092" ]
          , autoCommit = None Integer
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let kafkaConsumerCfg =
          { topicNames = [ "location-updates-master" ], consumerProperties }

    let availabilityTimeWindowOption =
          { period = +7, periodType = common.periodType.Days }

    let cacheConfig = { configsExpTime = +86400 }

    let tables =
          { enableKVForWriteAlso =
              [] : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead = [] : List Text
          }

    in  { hedisCfg
        , hedisNonCriticalCfg = hedisCfg
        , hedisNonCriticalClusterCfg = hedisClusterCfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg
        , esqDBCfg
        , esqDBReplicaCfg
        , cacheConfig
        , dumpEvery = +30
        , kafkaConsumerCfg
        , availabilityTimeWindowOption
        , timeBetweenUpdates = +60
        , granualityPeriodType = common.periodType.Hours
        , httpClientOptions = common.httpClientOptions
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/kafka-consumers.log", logRawSql = False }
        , tables
        }
  driver-offer-allocator.dhall: |
    let common = ../generic/common.dhall

    let appCfg = ./dynamic-offer-driver-app.dhall

    let schedulerConfig =
          { loggerConfig =
                  common.loggerConfig
              //  { logRawSql = True
                  , logFilePath = "/tmp/driver-offer-scheduler.log"
                  , prettyPrinting = True
                  }
          , esqDBCfg = appCfg.esqDBCfg
          , metricsPort = +8056
          , hedisCfg = appCfg.hedisCfg
          , hedisNonCriticalCfg = appCfg.hedisCfg
          , hedisNonCriticalClusterCfg = appCfg.hedisClusterCfg
          , enableRedisLatencyLogging = False
          , enablePrometheusMetricLogging = True
          , hedisMigrationStage = False
          , cutOffHedisCluster = False
          , hedisClusterCfg = appCfg.hedisClusterCfg
          , hedisPrefix = "driver-offer-scheduler"
          , port = +8055
          , loopIntervalSec = +5
          , expirationTime = +60
          , waitBeforeRetry = +1
          , tasksPerIteration = +20
          , graceTerminationPeriod = +10
          , groupName = "myGroup"
          , schedulerType = common.schedulerType.RedisBased
          , schedulerSetName = "Scheduled_Jobs"
          , streamName = "Available_Jobs"
          , maxThreads = +10
          }

    in  { appCfg =
                appCfg
            //  { loggerConfig =
                        appCfg.loggerConfig
                    //  { logFilePath = "/tmp/driver-offer-allocator.log" }
                }
        , schedulerConfig
        }
  dynamic-offer-driver-app-driver-tracking-healthcheck-service.dhall: |
    let globalCommon = ../generic/common.dhall

    let appCfg = ./dynamic-offer-driver-app.dhall

    in  { driverAllowedDelayForLocationUpdateInSec = +60
        , driverLocationHealthCheckIntervalInSec = +120
        , driverAppName = "dynamic-offer-driver-app"
        , notificationMinDelay = +50000
        , metricsPort = +9997
        , healthcheckPort = +8115
        , loggerConfig =
                appCfg.loggerConfig
            //  { logFilePath = "/tmp/driver-tracking-healthcheck.log" }
        , httpClientOptions = appCfg.httpClientOptions
        , shortDurationRetryCfg = appCfg.shortDurationRetryCfg
        , longDurationRetryCfg = appCfg.longDurationRetryCfg
        , graceTerminationPeriod = appCfg.graceTerminationPeriod
        , hedisCfg = appCfg.hedisCfg
        , hedisNonCriticalCfg = appCfg.hedisCfg
        , hedisNonCriticalClusterCfg = appCfg.hedisClusterCfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = appCfg.hedisClusterCfg
        , esqDBCfg = appCfg.esqDBCfg
        , encTools = appCfg.encTools
        , driverInactiveDelay = +86400
        , smsCfg = appCfg.smsCfg
        , driverInactiveSmsTemplate =
            "Alert! You have been marked Busy on Yatri Partner, as we have not received any location update from your phone in more than a day. Please open the app and update your location for the app to work properly."
        , cacheConfig = appCfg.cacheConfig
        }
  dynamic-offer-driver-app.dhall: |
    let common = ./common.dhall

    let globalCommon = ../generic/common.dhall

    let sec = ./secrets/dynamic-offer-driver-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_driver_offer_bpp_v2"
          , connectSchemaName = "atlas_driver_offer_bpp"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let smsConfig =
          { sessionConfig = common.smsSessionConfig
          , credConfig =
            { username = common.smsUserName
            , password = common.smsPassword
            , otpHash = sec.smsOtpHash
            }
          , useFakeSms = Some 7891
          , url = "https://http.myvfirst.com"
          , sender = "JUSPAY"
          }

    let apiRateLimitOptions = { limit = +100000, limitResetTimeInSec = +1 }

    let slackCfg =
          { channelName = "beckn-driver-onboard-test"
          , slackToken = common.slackToken
          }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let driverLocationUpdateRateLimitOptions =
          { limit = +2000000000, limitResetTimeInSec = +2 }

    let cacheConfig = { configsExpTime = +86400 }

    let cacheTranslationConfig = { expTranslationTime = +3600 }

    let kafkaProducerCfg =
          { brokers = [ "kafka.kafka.svc.cluster.local:9092" ]
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let clickhouseCfg =
          { username = "xxxx"
          , host = "xxxxx"
          , port = 1234
          , password = "xxxx"
          , database = "xxxx"
          , tls = True
          }

    let sampleKafkaConfig
        : globalCommon.kafkaConfig
        = { topicName = "dynamic-offer-driver-events-updates"
          , kafkaKey = "dynamic-offer-driver"
          }

    let sampleLogConfig
        : Text
        = "log-stream"

    let eventStreamMappings =
          [ { streamName = globalCommon.eventStreamNameType.KAFKA_STREAM
            , streamConfig = globalCommon.streamConfig.KafkaStream sampleKafkaConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.RideStarted
              , globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              , globalCommon.eventType.BookingCreated
              , globalCommon.eventType.BookingCancelled
              , globalCommon.eventType.BookingCompleted
              , globalCommon.eventType.SearchRequest
              , globalCommon.eventType.Quotes
              , globalCommon.eventType.Estimate
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.LOG_STREAM
            , streamConfig = globalCommon.streamConfig.LogStream sampleLogConfig
            , eventTypes =
              [ globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              ]
            }
          ]

    let tables =
          { enableKVForWriteAlso =
                [ { nameOfTable = "registration_token", percentEnable = 100 }
                , { nameOfTable = "search_request", percentEnable = 100 }
                , { nameOfTable = "search_try", percentEnable = 100 }
                , { nameOfTable = "driver_information", percentEnable = 100 }
                , { nameOfTable = "driver_flow_status", percentEnable = 100 }
                , { nameOfTable = "business_event", percentEnable = 100 }
                , { nameOfTable = "booking", percentEnable = 100 }
                , { nameOfTable = "estimate", percentEnable = 100 }
                , { nameOfTable = "fare_parameters", percentEnable = 100 }
                , { nameOfTable = "fare_parameters_progressive_details", percentEnable = 100 }
                , { nameOfTable = "booking_location", percentEnable = 100 }
                , { nameOfTable = "ride_details", percentEnable = 100 }
                , { nameOfTable = "rider_details", percentEnable = 100 }
                , { nameOfTable = "driver_stats", percentEnable = 100 }
                , { nameOfTable = "driver_quote"
                  , percentEnable = 100
                  }
                , { nameOfTable = "search_request_location", percentEnable = 100 }
                , { nameOfTable = "fare_parameters_slab_details", percentEnable = 100 }
                , { nameOfTable = "booking_cancellation_reason", percentEnable = 100 }
                , { nameOfTable = "rating", percentEnable = 100 }
                , { nameOfTable = "beckn_request", percentEnable = 100 }
                , { nameOfTable = "ride", percentEnable = 100 }
                , { nameOfTable = "search_request_for_driver", percentEnable = 100 }
                , { nameOfTable = "person", percentEnable = 100 }
                , { nameOfTable = "vehicle", percentEnable = 100 }
                , { nameOfTable = "driver_rc_association", percentEnable = 100 }
                , { nameOfTable = "driver_referral", percentEnable = 100 }
                , { nameOfTable = "message", percentEnable = 100 }
                , { nameOfTable = "idfy_verification", percentEnable = 100 }
                ]
              : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead =
                [ "registration_token"
                , "search_request"
                , "search_try"
                , "driver_information"
                , "driver_flow_status"
                , "business_event"
                , "booking"
                , "estimate"
                , "fare_parameters"
                , "fare_parameters_progressive_details"
                , "booking_location"
                , "ride_details"
                , "rider_details"
                , "driver_stats"
                , "driver_quote"
                , "search_request_location"
                , "fare_parameters_slab_details"
                , "booking_cancellation_reason"
                , "rating"
                , "beckn_request"
                , "search_request_for_driver"
                , "ride"
                , "person"
                , "vehicle"
                , "driver_rc_association"
                , "driver_referral"
                , "message"
                , "idfy_verification"
                ]
              : List Text
          }

    let appBackendBapInternal =
          { name = "APP_BACKEND"
          , url = "http://beckn-app-backend-master.atlas.svc.cluster.local:8013"
          , apiKey = sec.appBackendApikey
          , internalKey = sec.internalKey
          }

    let AllocatorJobType =
          < SendSearchRequestToDriver
          | SendPaymentReminderToDriver
          | UnsubscribeDriverForPaymentOverdue
          | UnblockDriver
          >

    let jobInfoMapx =
          [ { mapKey = AllocatorJobType.SendSearchRequestToDriver
            , mapValue = False
            }
          , { mapKey = AllocatorJobType.SendPaymentReminderToDriver
            , mapValue = False
            }
          , { mapKey = AllocatorJobType.UnsubscribeDriverForPaymentOverdue
            , mapValue = True
            }
          , { mapKey = AllocatorJobType.UnblockDriver, mapValue = False }
          ]

    in  { esqDBCfg
        , esqDBReplicaCfg
        , esqLocationDBCfg = esqDBCfg
        , esqLocationDBRepCfg = esqDBReplicaCfg
        , clickhouseCfg
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = True
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , port = +8016
        , metricsPort = +9997
        , hostName = "juspay.in"
        , nwAddress = "https://api.sandbox.beckn.juspay.in/dev/dobpp/beckn"
        , selfUIUrl = "https://api.sandbox.beckn.juspay.in/dev/dobpp/ui"
        , signingKey = sec.signingKey
        , signatureExpiry = common.signatureExpiry
        , s3Config = common.s3Config
        , s3PublicConfig = common.s3PublicConfig
        , migrationPath = None Text
        , jobInfoMapx
        , autoMigrate = common.autoMigrate
        , coreVersion = "0.9.4"
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/dynamic-offer-driver-app.log"
                , logRawSql = True
                }
        , googleTranslateUrl = common.googleTranslateUrl
        , googleTranslateKey = common.googleTranslateKey
        , appBackendBapInternal
        , graceTerminationPeriod = +90
        , encTools
        , authTokenCacheExpiry = +600
        , disableSignatureAuth = False
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , apiRateLimitOptions
        , slackCfg
        , smsCfg = smsConfig
        , searchRequestExpirationSeconds = +1800
        , driverQuoteExpirationSeconds = +15
        , driverUnlockDelay = +2
        , cacheConfig
        , metricsSearchDurationTimeout = +45
        , dashboardToken = sec.dashboardToken
        , driverLocationUpdateRateLimitOptions
        , driverReachedDistance = +100
        , cacheTranslationConfig
        , driverLocationUpdateTopic = "location-updates-master"
        , broadcastMessageTopic = "broadcast-messages-master"
        , kafkaProducerCfg
        , snapToRoadSnippetThreshold = +300
        , minTripDistanceForReferralCfg = Some +1000
        , maxShards = +5
        , enableAPILatencyLogging = False
        , enableAPIPrometheusMetricLogging = True
        , eventStreamMap = eventStreamMappings
        , locationTrackingServiceKey = sec.locationTrackingServiceKey
        , tables
        , schedulerSetName = "Scheduled_Jobs"
        , schedulerType = common.schedulerType.RedisBased
        }
  globalCommon.dhall: |
    let mkShard =
          \(shardId : Integer) ->
          \(shortOrgId : Text) ->
            { mapKey = shardId, mapValue = shortOrgId }

    let PeriodType = < Minutes | Hours | Days | Months | Years >

    let LogLevel = < DEBUG | INFO | WARNING | ERROR >

    let KafkaCompression = < NO_COMPRESSION | GZIP | SNAPPY | LZ4 >

    let S3AwsConfig =
          { accessKeyId : Text
          , secretAccessKey : Text
          , bucketName : Text
          , region : Text
          , pathPrefix : Text
          }

    let S3MockConfig =
          { baseLocalDirectory : Text, bucketName : Text, pathPrefix : Text }

    let S3Config = < S3AwsConf : S3AwsConfig | S3MockConf : S3MockConfig >

    let smsSessionConfig = { attempts = +3, authExpiry = +3, tokenExpiry = +365 }

    let loggerConfig =
          { level = LogLevel.DEBUG
          , logToFile = False
          , logToConsole = True
          , logRawSql = False
          , prettyPrinting = False
          }

    let ConsumerType = < AVAILABILITY_TIME | FEED_TO_CLICKHOUSE | PERSON_STATS >

    let kafkaConfig = { topicName : Text, kafkaKey : Text }

    let eventStreamNameType =
          < KAFKA_STREAM | LOG_STREAM | PROMETHEUS_STREAM | REDIS_STREAM >

    let streamConfig =
          < KafkaStream : kafkaConfig | LogStream : Text | PrometheusStream : Text >

    let eventType =
          < RideCreated
          | RideStarted
          | RideEnded
          | RideCancelled
          | BookingCreated
          | BookingCancelled
          | BookingCompleted
          | SearchRequest
          | Quotes
          | Estimate
          >

    let httpClientOptions = { timeoutMs = +4000 }

    let shortDurationRetryCfg = { maxRetries = +3, baseCoefficient = +2 }

    let longDurationRetryCfg = { maxRetries = +3, baseCoefficient = +4 }

    let ServerName =
          < APP_BACKEND | BECKN_TRANSPORT | DRIVER_OFFER_BPP | SPECIAL_ZONE >

    let SchedulerType = < RedisBased | DbBased >

    in  { smsSessionConfig
        , autoMigrate = False
        , loggerConfig
        , LogLevel
        , signatureExpiry = +600
        , mkShard
        , httpClientOptions
        , shortDurationRetryCfg
        , longDurationRetryCfg
        , ServerName
        , S3Config
        , periodType = PeriodType
        , consumerType = ConsumerType
        , kafkaCompression = KafkaCompression
        , kafkaConfig
        , streamConfig
        , eventStreamNameType
        , eventType
        , schedulerType = SchedulerType
        }
  mock-registry.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/mock-registry.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_mock_registry_v2"
          , connectSchemaName = "atlas_mock_registry"
          , connectionPoolCount = +25
          }

    in  { port = +8020
        , graceTerminationPeriod = +90
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/mock-registry.log" }
        , esqDBCfg
        , autoMigrate = common.autoMigrate
        , migrationPath = None Text
        }
  person-stats.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/rider-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_app_v2"
          , connectSchemaName = "atlas_app"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hedisCfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let hedisClusterCfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let consumerProperties =
          { groupId = "person-stats-compute"
          , brockers = [ "kafka.kafka.svc.cluster.local:9092" ]
          , autoCommit = None Integer
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let kafkaConsumerCfg =
          { topicNames = [ "rider-app-events-updates" ], consumerProperties }

    let availabilityTimeWindowOption =
          { period = +7, periodType = common.periodType.Days }

    let cacheConfig = { configsExpTime = +86400 }

    let tables =
          { enableKVForWriteAlso =
              [] : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead = [] : List Text
          }

    in  { hedisCfg
        , hedisClusterCfg
        , hedisNonCriticalCfg = hedisCfg
        , hedisNonCriticalClusterCfg = hedisClusterCfg
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , esqDBCfg
        , esqDBReplicaCfg
        , cacheConfig
        , dumpEvery = +10
        , kafkaConsumerCfg
        , timeBetweenUpdates = +10
        , availabilityTimeWindowOption
        , granualityPeriodType = common.periodType.Hours
        , httpClientOptions = common.httpClientOptions
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/kafka-consumers-person-stats.log"
                , logRawSql = False
                }
        , enableRedisLatencyLogging = True
        , enablePrometheusMetricLogging = True
        , tables
        }
  producer.dhall: |2

    let common = ./common.dhall

    let sec = ./secrets/dynamic-offer-driver-app.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_driver_offer_bpp_v2"
          , connectSchemaName = "atlas_driver_offer_bpp"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hedisCfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let hedisClusterCfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let cacheConfig = { configsExpTime = +86400 }

    let tables =
          { enableKVForWriteAlso =
              [] : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead = [] : List Text
          }

    in  { hedisCfg
        , hedisClusterCfg
        , hedisNonCriticalCfg = hedisCfg
        , hedisNonCriticalClusterCfg = hedisClusterCfg
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , esqDBCfg
        , esqDBReplicaCfg
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/producer.log", prettyPrinting = True }
        , enableRedisLatencyLogging = True
        , enablePrometheusMetricLogging = True
        , waitTimeMilliSec = +1000.0
        , producerTimestampKey = "producerTimestampKey"
        , batchSize = +10
        , streamName = "Available_Jobs"
        , cacheConfig
        , schedulerSetName = "Scheduled_Jobs"
        , entryId = "*"
        , reviverInterval = +1000
        , reviveThreshold = +3600
        , schedulerType = common.schedulerType.RedisBased
        , maxShards = +5
        , tables
        }
  provider-dashboard.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/provider-dashboard.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_bpp_dashboard_v2"
          , connectSchemaName = "atlas_bpp_dashboard"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let specialZone =
          { name = common.ServerName.SPECIAL_ZONE
          , url = "http://beckn-special-zone-master.atlas:8032/"
          , token = sec.specialZoneToken
          }

    let apiRateLimitOptions = { limit = +4, limitResetTimeInSec = +600 }

    let shareRideApiRateLimitOptions = { limit = +20, limitResetTimeInSec = +60 }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let becknTransport =
          { name = common.ServerName.BECKN_TRANSPORT
          , url = "http://beckn-transport-master.atlas:8014/"
          , token = sec.becknTransportToken
          }

    let driverOfferBpp =
          { name = common.ServerName.DRIVER_OFFER_BPP
          , url = "http://beckn-dobpp-dashboard-internal-master.atlas:8016/"
          , token = sec.driverOfferBppToken
          }

    let appBackend =
          { name = common.ServerName.APP_BACKEND
          , url = "http://beckn-app-backend-dashboard-internal-master.atlas:8013/"
          , token = sec.appBackendToken
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , port = +8018
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/provider-dashboard.log" }
        , graceTerminationPeriod = +90
        , apiRateLimitOptions
        , shareRideApiRateLimitOptions
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , authTokenCacheExpiry = +600
        , registrationTokenExpiry = +365
        , encTools
        , exotelToken = sec.exotelToken
        , dataServers = [ becknTransport, driverOfferBpp, appBackend, specialZone ]
        }
  public-transport-rider-platform.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/public-transport-rider-platform.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_public_transport_v2"
          , connectSchemaName = "atlas_public_transport"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +1
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let kafkaProducerCfg =
          { brokers = [ "alpha-c1-kafka-bootstrap.strimzi.svc.cluster.local:9092" ]
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , port = +8023
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/public-transport-rider-platform.log" }
        , graceTerminationPeriod = +90
        , selfId = "api.sandbox.beckn.juspay.in/dev/bap/public-transport/v1"
        , selfURI =
            "https://api.sandbox.beckn.juspay.in/dev/bap/public-transport/v1"
        , authServiceUrl = common.authServiceUrl
        , authEntity =
          { signingKey = sec.signingKey
          , uniqueKeyId = "50"
          , signatureExpiry = common.signatureExpiry
          }
        , disableSignatureAuth = False
        , hostName = "juspay.in"
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , registryUrl = common.registryUrl
        , kafkaProducerCfg
        }
  public-transport-search-consumer.dhall: |
    let common = ./common.dhall

    let main = ./public-transport-rider-platform.dhall

    let juspayGatewayUrl = "https://api.sandbox.beckn.juspay.in/dev/gateway/v1/"

    let kafkaConsumerCfgs =
          { publicTransportSearch =
            { brokers =
              [ "alpha-c1-kafka-bootstrap.strimzi.svc.cluster.local:9092" ]
            , groupId = "publicTransportSearchGroup"
            }
          }

    in  { esqDBCfg = main.esqDBCfg
        , migrationPath = main.migrationPath
        , autoMigrate = main.autoMigrate
        , port = +8024
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/public-transport-search-consumer.log" }
        , graceTerminationPeriod = +90
        , bapId = main.selfId
        , bapURI = main.selfURI
        , gatewayUrl = juspayGatewayUrl
        , httpClientOptions = main.httpClientOptions
        , shortDurationRetryCfg = main.shortDurationRetryCfg
        , longDurationRetryCfg = main.longDurationRetryCfg
        , authEntity = main.authEntity
        , kafkaConsumerCfgs
        }
  rider-app-dashboard-internal.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/rider-app.dhall

    let globalCommon = ../generic/common.dhall

    let cacheFeedbackFormConfig = { configsExpTime = +5184000 }

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_app_v2"
          , connectSchemaName = "atlas_app"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let hccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let smsConfig =
          { sessionConfig = common.smsSessionConfig
          , credConfig =
            { username = common.smsUserName
            , password = common.smsPassword
            , otpHash = sec.smsOtpHash
            }
          , useFakeSms = Some 7891
          , url = "https://http.myvfirst.com"
          , sender = "JUSPAY"
          }

    let InfoBIPConfig =
          { username = common.InfoBIPConfig.username
          , password = common.InfoBIPConfig.password
          , token = common.InfoBIPConfig.token
          , webhookurl = "https://5vmxvj.api.infobip.com"
          , url = "https://5vmxvj.api.infobip.com"
          , sender = "JUSPAY"
          }

    let WebengageConfig = { url = "https://st.in.webengage.com" }

    let sampleKafkaConfig
        : globalCommon.kafkaConfig
        = { topicName = "rider-app-events-updates", kafkaKey = "rider-app" }

    let sampleLogConfig
        : Text
        = "log-stream"

    let samplePrometheusConfig
        : Text
        = "prometheus-stream"

    let eventStreamMappings =
          [ { streamName = globalCommon.eventStreamNameType.KAFKA_STREAM
            , streamConfig = globalCommon.streamConfig.KafkaStream sampleKafkaConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.RideStarted
              , globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              , globalCommon.eventType.BookingCreated
              , globalCommon.eventType.BookingCancelled
              , globalCommon.eventType.BookingCompleted
              , globalCommon.eventType.SearchRequest
              , globalCommon.eventType.Quotes
              , globalCommon.eventType.Estimate
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.LOG_STREAM
            , streamConfig = globalCommon.streamConfig.LogStream sampleLogConfig
            , eventTypes =
              [ globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.PROMETHEUS_STREAM
            , streamConfig =
                globalCommon.streamConfig.PrometheusStream samplePrometheusConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.SearchRequest
              ]
            }
          ]

    let apiRateLimitOptions = { limit = +4, limitResetTimeInSec = +600 }

    let searchRateLimitOptions = { limit = +400, limitResetTimeInSec = +1 }

    let slackCfg =
          { channelName = "#beckn-driver-onboard-test"
          , slackToken = common.slackToken
          }

    let httpClientOptions = { timeoutMs = +4000 }

    let shortDurationRetryCfg = { maxRetries = +3, baseCoefficient = +2 }

    let longDurationRetryCfg = { maxRetries = +3, baseCoefficient = +4 }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let kafkaProducerCfg =
          { brokers = [ "kafka-0.kafka.svc.cluster.local:9092" ]
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let rideConfig =
          { driverReachedDistance = +100, driverOnTheWayNotifyExpiry = +3600 }

    let cacheConfig = { configsExpTime = +86400 }

    let cacheTranslationConfig = { expTranslationTime = +3600 }



    let tables =
          { enableKVForWriteAlso =
                [ { nameOfTable = "search_request_location", percentEnable = 100 }
                , { nameOfTable = "registration_token", percentEnable = 100 }
                , { nameOfTable = "search_request", percentEnable = 100 }
                , { nameOfTable = "person_flow_status", percentEnable = 100 }
                , { nameOfTable = "estimate_breakup", percentEnable = 100 }
                , { nameOfTable = "estimate_breakup", percentEnable = 100 }
                , { nameOfTable = "estimate", percentEnable = 100 }
                , { nameOfTable = "on_search_event", percentEnable = 100 }
                , { nameOfTable = "driver_offer", percentEnable = 100 }
                , { nameOfTable = "quote", percentEnable = 100 }
                , { nameOfTable = "booking_location", percentEnable = 100 }
                , { nameOfTable = "ride", percentEnable = 100 }
                , { nameOfTable = "fare_breakup", percentEnable = 100 }
                , { nameOfTable = "directions_cache", percentEnable = 100 }
                , { nameOfTable = "place_name_cache", percentEnable = 100 }
                , { nameOfTable = "booking_cancellation_reason"
                  , percentEnable = 100
                  }
                , { nameOfTable = "rental_slab", percentEnable = 100 }
                , { nameOfTable = "special_request_zone", percentEnable = 100 }
                , { nameOfTable = "saved_req_location", percentEnable = 100 }
                , { nameOfTable = "trip_terms", percentEnable = 100 }
                , { nameOfTable = "web_engage", percentEnable = 100 }
                , { nameOfTable = "booking", percentEnable = 100 }
                , { nameOfTable = "beckn_request", percentEnable = 100 }
                ]
              : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead =
                [ "search_request_location"
                , "registration_token"
                , "search_request"
                , "person_flow_status"
                , "estimate_breakup"
                , "estimate_breakup"
                , "estimate"
                , "on_search_event"
                , "driver_offer"
                , "quote"
                , "booking_location"
                , "ride"
                , "fare_breakup"
                , "directions_cache"
                , "place_name_cache"
                , "booking_cancellation_reason"
                , "rental_slab"
                , "special_request_zone"
                , "saved_req_location"
                , "trip_terms"
                , "booking"
                , "web_engage"
                , "beckn_request"
                ]
              : List Text
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , hedisCfg = hcfg
        , hedisNonCriticalCfg = hcfg
        , hedisNonCriticalClusterCfg = hccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , cutOffNonCriticalHedisCluster = True
        , hedisClusterCfg = hccfg
        , smsCfg = smsConfig
        , infoBIPCfg = InfoBIPConfig
        , webengageCfg = WebengageConfig
        , port = +8013
        , metricsPort = +9999
        , hostName = "juspay.in"
        , selfUIUrl = "https://api.sandbox.beckn.juspay.in/dev/bap/v2/"
        , nwAddress = "https://api.sandbox.beckn.juspay.in/dev/bap/beckn"
        , signingKey = sec.signingKey
        , signatureExpiry = common.signatureExpiry
        , searchRequestExpiry = Some +1800
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , coreVersion = "0.9.4"
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/rider-app.log" }
        , googleTranslateUrl = common.googleTranslateUrl
        , cacheFeedbackFormConfig
        , googleTranslateKey = common.googleTranslateKey
        , internalAPIKey = sec.internalAPIKey
        , metricsSearchDurationTimeout = +45
        , graceTerminationPeriod = +90
        , apiRateLimitOptions
        , searchRateLimitOptions
        , slackCfg
        , searchLimitExceedNotificationTemplate =
            "Customer with {#cust-id#} is exceeding the search limit."
        , httpClientOptions
        , shortDurationRetryCfg
        , longDurationRetryCfg
        , authTokenCacheExpiry = +600
        , disableSignatureAuth = False
        , encTools
        , kafkaProducerCfg
        , rideCfg = rideConfig
        , cacheConfig
        , dashboardToken = sec.dashboardToken
        , cacheTranslationConfig
        , maxEmergencyNumberCount = +3
        , minTripDistanceForReferralCfg = Some +1000
        , eventStreamMap = eventStreamMappings
        , tables
        }
  rider-app.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/rider-app.dhall

    let globalCommon = ../generic/common.dhall

    let cacheFeedbackFormConfig = { configsExpTime = +5184000 }

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_app_v2"
          , connectSchemaName = "atlas_app"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let hcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let hccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let smsConfig =
          { sessionConfig = common.smsSessionConfig
          , credConfig =
            { username = common.smsUserName
            , password = common.smsPassword
            , otpHash = sec.smsOtpHash
            }
          , useFakeSms = Some 7891
          , url = "https://http.myvfirst.com"
          , sender = "JUSPAY"
          }

    let InfoBIPConfig =
          { username = common.InfoBIPConfig.username
          , password = common.InfoBIPConfig.password
          , token = common.InfoBIPConfig.token
          , webhookurl = "https://5vmxvj.api.infobip.com"
          , url = "https://5vmxvj.api.infobip.com"
          , sender = "JUSPAY"
          }

    let WebengageConfig = { url = "https://st.in.webengage.com" }

    let sampleKafkaConfig
        : globalCommon.kafkaConfig
        = { topicName = "rider-app-events-updates", kafkaKey = "rider-app" }

    let sampleLogConfig
        : Text
        = "log-stream"

    let samplePrometheusConfig
        : Text
        = "prometheus-stream"

    let eventStreamMappings =
          [ { streamName = globalCommon.eventStreamNameType.KAFKA_STREAM
            , streamConfig = globalCommon.streamConfig.KafkaStream sampleKafkaConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.RideStarted
              , globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              , globalCommon.eventType.BookingCreated
              , globalCommon.eventType.BookingCancelled
              , globalCommon.eventType.BookingCompleted
              , globalCommon.eventType.SearchRequest
              , globalCommon.eventType.Quotes
              , globalCommon.eventType.Estimate
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.LOG_STREAM
            , streamConfig = globalCommon.streamConfig.LogStream sampleLogConfig
            , eventTypes =
              [ globalCommon.eventType.RideEnded
              , globalCommon.eventType.RideCancelled
              ]
            }
          , { streamName = globalCommon.eventStreamNameType.PROMETHEUS_STREAM
            , streamConfig =
                globalCommon.streamConfig.PrometheusStream samplePrometheusConfig
            , eventTypes =
              [ globalCommon.eventType.RideCreated
              , globalCommon.eventType.SearchRequest
              ]
            }
          ]

    let apiRateLimitOptions = { limit = +4, limitResetTimeInSec = +600 }

    let searchRateLimitOptions = { limit = +400, limitResetTimeInSec = +1 }

    let slackCfg =
          { channelName = "#beckn-driver-onboard-test"
          , slackToken = common.slackToken
          }

    let httpClientOptions = { timeoutMs = +4000 }

    let shortDurationRetryCfg = { maxRetries = +3, baseCoefficient = +2 }

    let longDurationRetryCfg = { maxRetries = +3, baseCoefficient = +4 }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let kafkaProducerCfg =
          { brokers = [ "kafka-0.kafka.svc.cluster.local:9092" ]
          , kafkaCompression = common.kafkaCompression.LZ4
          }

    let rideConfig =
          { driverReachedDistance = +100, driverOnTheWayNotifyExpiry = +3600 }

    let cacheConfig = { configsExpTime = +86400 }

    let cacheTranslationConfig = { expTranslationTime = +3600 }


    let tables =
          { enableKVForWriteAlso =
                [ { nameOfTable = "search_request_location", percentEnable = 100 }
                , { nameOfTable = "registration_token", percentEnable = 100 }
                , { nameOfTable = "search_request", percentEnable = 100 }
                , { nameOfTable = "person_flow_status", percentEnable = 100 }
                , { nameOfTable = "estimate_breakup", percentEnable = 100 }
                , { nameOfTable = "estimate_breakup", percentEnable = 100 }
                , { nameOfTable = "estimate", percentEnable = 100 }
                , { nameOfTable = "on_search_event", percentEnable = 100 }
                , { nameOfTable = "driver_offer", percentEnable = 100 }
                , { nameOfTable = "quote", percentEnable = 100 }
                , { nameOfTable = "booking_location", percentEnable = 100 }
                , { nameOfTable = "ride", percentEnable = 100 }
                , { nameOfTable = "fare_breakup", percentEnable = 100 }
                , { nameOfTable = "directions_cache", percentEnable = 100 }
                , { nameOfTable = "place_name_cache", percentEnable = 100 }
                , { nameOfTable = "booking_cancellation_reason"
                  , percentEnable = 100
                  }
                , { nameOfTable = "rental_slab", percentEnable = 100 }
                , { nameOfTable = "special_request_zone", percentEnable = 100 }
                , { nameOfTable = "saved_req_location", percentEnable = 100 }
                , { nameOfTable = "trip_terms", percentEnable = 100 }
                , { nameOfTable = "web_engage", percentEnable = 100 }
                , { nameOfTable = "booking", percentEnable = 100 }
                , { nameOfTable = "beckn_request", percentEnable = 100 }
                ]
              : List { nameOfTable : Text, percentEnable : Natural }
          , enableKVForRead =
                [ "search_request_location"
                , "registration_token"
                , "search_request"
                , "person_flow_status"
                , "estimate_breakup"
                , "estimate_breakup"
                , "estimate"
                , "on_search_event"
                , "driver_offer"
                , "quote"
                , "booking_location"
                , "ride"
                , "fare_breakup"
                , "directions_cache"
                , "place_name_cache"
                , "booking_cancellation_reason"
                , "rental_slab"
                , "special_request_zone"
                , "saved_req_location"
                , "trip_terms"
                , "booking"
                , "web_engage"
                , "beckn_request"
                ]
              : List Text
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , hedisCfg = hcfg
        , hedisNonCriticalCfg = hcfg
        , hedisNonCriticalClusterCfg = hccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , cutOffNonCriticalHedisCluster = True
        , hedisClusterCfg = hccfg
        , smsCfg = smsConfig
        , infoBIPCfg = InfoBIPConfig
        , webengageCfg = WebengageConfig
        , port = +8013
        , metricsPort = +9999
        , hostName = "juspay.in"
        , selfUIUrl = "https://api.sandbox.beckn.juspay.in/dev/bap/v2/"
        , nwAddress = "https://api.sandbox.beckn.juspay.in/dev/bap/beckn"
        , signingKey = sec.signingKey
        , signatureExpiry = common.signatureExpiry
        , searchRequestExpiry = Some +1800
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , coreVersion = "0.9.4"
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/rider-app.log" }
        , googleTranslateUrl = common.googleTranslateUrl
        , cacheFeedbackFormConfig
        , googleTranslateKey = common.googleTranslateKey
        , internalAPIKey = sec.internalAPIKey
        , metricsSearchDurationTimeout = +45
        , graceTerminationPeriod = +90
        , apiRateLimitOptions
        , searchRateLimitOptions
        , slackCfg
        , searchLimitExceedNotificationTemplate =
            "Customer with {#cust-id#} is exceeding the search limit."
        , httpClientOptions
        , shortDurationRetryCfg
        , longDurationRetryCfg
        , authTokenCacheExpiry = +600
        , disableSignatureAuth = False
        , encTools
        , kafkaProducerCfg
        , rideCfg = rideConfig
        , cacheConfig
        , dashboardToken = sec.dashboardToken
        , cacheTranslationConfig
        , maxEmergencyNumberCount = +3
        , minTripDistanceForReferralCfg = Some +1000
        , eventStreamMap = eventStreamMappings
        , tables
        }
  rider-dashboard.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/rider-dashboard.dhall

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_bap_dashboard_v2"
          , connectSchemaName = "atlas_bap_dashboard"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let apiRateLimitOptions = { limit = +4, limitResetTimeInSec = +600 }

    let shareRideApiRateLimitOptions = { limit = +20, limitResetTimeInSec = +60 }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let appBackend =
          { name = common.ServerName.APP_BACKEND
          , url = "http://beckn-app-backend-dashboard-internal-master.atlas:8013/"
          , token = sec.appBackendToken
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , port = +8017
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , loggerConfig =
            common.loggerConfig // { logFilePath = "/tmp/rider-dashboard.log" }
        , graceTerminationPeriod = +90
        , apiRateLimitOptions
        , shareRideApiRateLimitOptions
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , authTokenCacheExpiry = +600
        , registrationTokenExpiry = +365
        , encTools
        , exotelToken = sec.exotelToken
        , dataServers = [ appBackend ]
        }
  search-result-aggregator.dhall: |
    let common = ./common.dhall

    let hcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +1
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let hccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let kafkaConsumerCfgs =
          { publicTransportQuotes =
            { brokers =
              [ "alpha-c1-kafka-bootstrap.strimzi.svc.cluster.local:9092" ]
            , groupId = "publicTransportQuotesGroup"
            , timeoutMilliseconds = +10000
            }
          }

    in  { port = +8025
        , graceTerminationPeriod = +90
        , hedisCfg = hcfg
        , hedisNonCriticalCfg = hcfg
        , hedisNonCriticalClusterCfg = hccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = hccfg
        , kafkaConsumerCfgs
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/search-result-aggregator.log" }
        }
  static-offer-driver-app-driver-tracking-healthcheck-service.dhall: |
    let globalCommon = ../generic/common.dhall

    let appCfg = ./static-offer-driver-app.dhall

    in  { driverAllowedDelayForLocationUpdateInSec = +60
        , driverLocationHealthCheckIntervalInSec = +120
        , driverAppName = "static-offer-driver-app"
        , notificationMinDelay = +50000
        , metricsPort = +9997
        , healthcheckPort = +8115
        , loggerConfig =
                appCfg.loggerConfig
            //  { logFilePath = "/tmp/driver-tracking-healthcheck.log" }
        , httpClientOptions = appCfg.httpClientOptions
        , shortDurationRetryCfg = appCfg.shortDurationRetryCfg
        , longDurationRetryCfg = appCfg.longDurationRetryCfg
        , graceTerminationPeriod = appCfg.graceTerminationPeriod
        , hedisCfg = appCfg.hedisCfg
        , hedisNonCriticalCfg = appCfg.hedisCfg
        , hedisNonCriticalClusterCfg = appCfg.hedisClusterCfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = appCfg.hedisClusterCfg
        , esqDBCfg = appCfg.esqDBCfg
        , encTools = appCfg.encTools
        , driverInactiveDelay = +86400
        , smsCfg = appCfg.smsCfg
        , driverInactiveSmsTemplate =
            "Alert! You have been marked Busy on Yatri Partner, as we have not received any location update from your phone in more than a day. Please open the app and update your location for the app to work properly."
        , cacheConfig = appCfg.cacheConfig
        }
  static-offer-driver-app.dhall: |
    let common = ./common.dhall

    let sec = ./secrets/static-offer-driver-app.dhall

    let GeoRestriction = < Unrestricted | Regions : List Text >

    let esqDBCfg =
          { connectHost =
              "beckn-test-integ-aurora.ctiuwghisbi9.ap-south-1.rds.amazonaws.com"
          , connectPort = 5432
          , connectUser = sec.dbUserId
          , connectPassword = sec.dbPassword
          , connectDatabase = "atlas_transporter_v2"
          , connectSchemaName = "atlas_transporter"
          , connectionPoolCount = +25
          }

    let esqDBReplicaCfg =
          { connectHost = esqDBCfg.connectHost
          , connectPort = esqDBCfg.connectPort
          , connectUser = esqDBCfg.connectUser
          , connectPassword = esqDBCfg.connectPassword
          , connectDatabase = esqDBCfg.connectDatabase
          , connectSchemaName = esqDBCfg.connectSchemaName
          , connectionPoolCount = +25
          }

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +1
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    let smsConfig =
          { sessionConfig = common.smsSessionConfig
          , credConfig =
            { username = common.smsUserName
            , password = common.smsPassword
            , otpHash = sec.smsOtpHash
            }
          , useFakeSms = Some 7891
          , url = "https://http.myvfirst.com"
          , sender = "JUSPAY"
          }

    let InfoBIPConfig =
          { username = common.InfoBIPConfig.username
          , password = common.InfoBIPConfig.password
          , token = common.InfoBIPConfig.token
          , webhookurl = "https://5vmxvj.api.infobip.com"
          , url = "https://5vmxvj.api.infobip.com"
          , sender = "JUSPAY"
          }

    let WebengageConfig = { url = "https://st.in.webengage.com" }

    let apiRateLimitOptions = { limit = +4, limitResetTimeInSec = +600 }

    let driverLocationUpdateRateLimitOptions =
          { limit = +200000, limitResetTimeInSec = +2 }

    let encTools = { service = common.passetto, hashSalt = sec.encHashSalt }

    let kafkaProducerCfg = { brokers = [ "kafka.kafka.svc.cluster.local:9092" ] }

    let cacheConfig = { configsExpTime = +86400 }

    let driverPoolCfg =
          { defaultRadiusOfSearch = +5000, driverPositionInfoExpiry = Some +600 }

    let endRideDefCfg =
          { pickupLocThreshold = +500
          , dropLocThreshold = +500
          , rideTravelledDistThresholdWhenPickupOrDestIsDiff = +700
          , rideTravelledDistThresholdWhenPickupAndDestIsSame = +1200
          , rideTimeEstimatedThreshold = +900
          , waitingTimeEstimatedThreshold = +3
          }

    let clickhouseCfg =
          { username = "xxxx"
          , host = "xxxxx"
          , port = 1234
          , password = "xxxx"
          , database = "xxxx"
          , tls = True
          }

    in  { esqDBCfg
        , esqDBReplicaCfg
        , clickhouseCfg
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , smsCfg = smsConfig
        , infoBIPCfg = InfoBIPConfig
        , webengageCfg = WebengageConfig
        , port = +8014
        , metricsPort = +9999
        , hostName = "juspay.in"
        , nwAddress = "https://api.sandbox.beckn.juspay.in/dev/bpp/cab/v1"
        , signingKey = sec.signingKey
        , signatureExpiry = common.signatureExpiry
        , searchExpiry = Some +7200
        , migrationPath = None Text
        , autoMigrate = common.autoMigrate
        , coreVersion = "0.9.4"
        , loggerConfig =
                common.loggerConfig
            //  { logFilePath = "/tmp/static-offer-driver-app.log" }
        , graceTerminationPeriod = +90
        , apiRateLimitOptions
        , httpClientOptions = common.httpClientOptions
        , shortDurationRetryCfg = common.shortDurationRetryCfg
        , longDurationRetryCfg = common.longDurationRetryCfg
        , authTokenCacheExpiry = +600
        , minimumDriverRatesCount = +5
        , recalculateFareEnabled = True
        , metricsSearchDurationTimeout = +45
        , registryUrl = common.registryUrl
        , disableSignatureAuth = False
        , encTools
        , kafkaProducerCfg
        , selfUIUrl = "https://api.sandbox.beckn.juspay.in/dev/bpp/cab/v2/"
        , schedulingReserveTime = +1800
        , driverEstimatedPickupDuration = +300
        , defaultEndRideCfg = endRideDefCfg
        , cacheConfig
        , dashboardToken = sec.dashboardToken
        , driverLocationUpdateRateLimitOptions
        , driverReachedDistance = +100
        , driverPoolCfg
        , driverLocationUpdateTopic = "location-updates-master"
        , snapToRoadSnippetThreshold = +300
        }
  transporter-scheduler.dhall: |
    let common = ../generic/common.dhall

    let sec = ./secrets/static-offer-driver-app.dhall

    let transporter = ./static-offer-driver-app.dhall

    let rcfg =
          { connectHost = "beckn-redis-001.zkt6uh.ng.0001.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +1
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = Some +100
          }

    let rccfg =
          { connectHost =
              "beckn-cluster-redis-001.zkt6uh.clustercfg.aps1.cache.amazonaws.com"
          , connectPort = 6379
          , connectAuth = None Text
          , connectDatabase = +0
          , connectMaxConnections = +50
          , connectMaxIdleTime = +30
          , connectTimeout = None Integer
          }

    in  { loggerConfig =
                common.loggerConfig
            //  { logRawSql = False
                , logFilePath = "/tmp/transporter-scheduler.log"
                }
        , esqDBCfg = transporter.esqDBCfg
        , metricsPort = +8054
        , hedisCfg = rcfg
        , hedisNonCriticalCfg = rcfg
        , hedisNonCriticalClusterCfg = rccfg
        , enableRedisLatencyLogging = False
        , enablePrometheusMetricLogging = True
        , hedisMigrationStage = False
        , cutOffHedisCluster = False
        , hedisClusterCfg = rccfg
        , hedisPrefix = "transporter-scheduler"
        , port = +8053
        , loopIntervalSec = +5
        , expirationTime = +60
        , waitBeforeRetry = +1
        , tasksPerIteration = +20
        , graceTerminationPeriod = +1
        }
kind: ConfigMap
metadata:
  creationTimestamp: "2022-03-24T08:49:44Z"
  name: beckn-dhall-config-master
  namespace: atlas
  resourceVersion: "764981065"
  uid: 603ea255-3ed3-4b07-a3e8-a3f5a191e7e4
